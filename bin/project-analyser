#!/bin/bash

# ------------
# A project analyser.
#
# @author    Björn Hempel <bjoern@hempel.li>
# @version   1.0 (2017-07-05)
#
# @copyright MIT License
# @copyright
# @copyright Copyright (c) 2017 Björn Hempel
# @copyright
# @copyright Permission is hereby granted, free of charge, to any person obtaining a copy
# @copyright of this software and associated documentation files (the "Software"), to deal
# @copyright in the Software without restriction, including without limitation the rights
# @copyright to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# @copyright copies of the Software, and to permit persons to whom the Software is
# @copyright furnished to do so, subject to the following conditions:
# @copyright
# @copyright The above copyright notice and this permission notice shall be included in all
# @copyright copies or substantial portions of the Software.
# @copyright
# @copyright THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# @copyright IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# @copyright FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# @copyright AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# @copyright LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# @copyright OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# @copyright SOFTWARE.
# @copyright
# @copyright Written by Björn Hempel <bjoern@hempel.li>.
# ------------

# some needed applications
applications=()

# some config
checkRootUser=false

# makes the regexp search case insensitive
shopt -s nocasematch

# some configs
       FRIENDS_OF_BASH_ROOT="/opt/friends-of-bash/friends-of-bash"
FRIENDS_OF_BASH_SOURCE_FILE="$FRIENDS_OF_BASH_ROOT/lib/all"

# include friends of bash
source "$FRIENDS_OF_BASH_SOURCE_FILE"

# some calculable configs before
if [ -h "${BASH_SOURCE[0]}" ]; then
    realScriptname=$(readlink "${BASH_SOURCE[0]}")
    pathRoot=$(dirname "$realScriptname")
    scriptname="${BASH_SOURCE[0]}"
else
    scriptname="$0"
    pathRoot="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# translate /usr/local/bin script names
[[ "$scriptname" =~ "/usr/local/bin" ]] && scriptname=$(basename "$scriptname")

# because we are inside the bin folder
pathRoot=$(dirname "$pathRoot")

# include some libraries
source "$pathRoot/lib/functions"
source "$pathRoot/lib/arguments"

# check installed friends of library apps
message=$(checkCurrentVersionNumbers "$pathRoot/.require")
lastStatus=$?
if [ $lastStatus -gt 0 ]; then
    echo "$message Abort.."
    exit 1
fi

# virtual host checker needs root credentials
if $ANALYSE_VIRTUAL_HOSTS; then
    checkRootUser=true
fi

# check the current used user
if $checkRootUser; then
    userId=$(id -u)

    if [[ $userId -ne 0 ]]; then
        echo "Please run this script as root."
        echo "sudo $0 ..."
        exit 1
    fi
fi

# check applications
for application in "${applications[@]}"; do
    which $application >/dev/null

    if [ "$?" -gt "0" ]; then
        echo "Application \"$application\" is not installed. Please install it before continuing. Abort.."
        exit 1
    fi
done

# check parameter count
if [ "${#PARAMETERS[@]}" -lt 1 ]; then
    projectPath=$(pwd)
else
    projectPath="${PARAMETERS[0]}"
fi

# check the given project path
if [ ! -d "$projectPath" ]; then
    echo "The given project path \"$projectPath\" was not found."
    exit 1
fi

# analyse the given project path
eval "declare -A project="$(analyzeProject "$projectPath")

if $SHOW_ONLY_APP_NAME; then
    echo "${project[app]}"

    exit 0
fi

# try to detect the servername from the virtual host
servername=""
redirectUrl=""
w3cJson=""
countErrors=0
countWarnings=0
if $ANALYSE_VIRTUAL_HOSTS; then
    if [ "$DOCKER_NAME" == "" ] && ! applicationExists apachectl; then
        echo 'It seems that the apache is not installed on this system. Do this before continue. Abort..' && exit
    fi

    servername=$(getServerNameFromProjectPath "$projectPath")

    if [ "$servername" != "" ]; then
        redirectUrl=$(getLastRedirectedUrl "$servername")
    fi

    if [ "$redirectUrl" != "" ]; then
        w3cJson=$(getW3CCheck "$redirectUrl")
    fi

    if [ "$w3cJson" != "" ]; then
        if $SHOW_DETAILED_W3C_ERRORS; then
            w3cErrors=$(getFilteredJsonArray "$w3cJson" '.type == "error"' ".messages")
            echo "$w3cErrors" | jq .[] | jq '{"type": .type, "line": .lastLine, "column": .firstColumn, "message": .message, "extract": .extract}' && exit
        fi

        countErrors=$(getCountOfFilteredJsonArray "$w3cJson" '.type == "error"' ".messages")
        countWarnings=$(getCountOfFilteredJsonArray "$w3cJson" '.type == "info" and .subType == "warning"' ".messages")
    fi
fi

# some other analysations
size=$(du -sh "$projectPath" | awk '{ print $1 }')
fileCount=$(find "$projectPath" -type f | wc -l)

# print out the app informations
[ "$servername"  != "" ] && echo "servername:   $servername"
[ "$redirectUrl" != "" ] && echo "redirect-url: $redirectUrl"
                            echo "app:          ${project[app]}"
                            echo "version:      ${project[version]}"
                            echo "size:         $size"
                            echo "file-count:   $fileCount"
[ "$redirectUrl" != "" ] && echo "w3c-errors:   $countErrors"
[ "$redirectUrl" != "" ] && echo "w3c-warnings: $countWarnings"


exit 0

